<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[DRIS Workflows]]></title><description><![CDATA[DRIS Workflow documentation pages]]></description><link>http://github.com/dylan/node-rss</link><generator>NodeJS RSS Module</generator><lastBuildDate>Fri, 13 Apr 2012 13:52:52 GMT</lastBuildDate><atom:link href="/feed.xml" rel="self" type="application/rss+xml"/><item><title><![CDATA[<a href="./contact">contact</a>]]></title><description><![CDATA[<p>People to contact for more information relating to the work that was carried out.

</p>
<h2>HOWEST</h2>
<ul>
<li>Groot Bluemink Quirijn <a href="mailto:Quirijn.Groot.Bluemink@howest.be">Quirijn.Groot.Bluemink@howest.be</a></li>
<li>Van Wambeke Matthias <a href="mailto:Matthias.Van.Wambeke@howest.be">Matthias.Van.Wambeke@howest.be</a></li>
</ul>
<h2>TCHPC, Trinity College Dublin</h2>
<ul>
<li>Jimmy Tang <a href="mailto:jtang@tchpc.tcd.ie">jtang@tchpc.tcd.ie</a> - 01-896-4466 - 086-3135905</li>
<li>Darach Golden <a href="mailto:darach@tchpc.tcd.ie">darach@tchpc.tcd.ie</a> - 01-896-3847 - 087-8229592</li>
</ul>
<h2>DRIS, Trinity College Dublin</h2>
<ul>
<li>DRIS Contacts not listed until permission is granted</li>
</ul>
]]></description><link>http://undefined/contact</link><guid isPermaLink="true">http://undefined/contact</guid><dc:creator><![CDATA[jtang]]></dc:creator><pubDate>Tue, 10 Apr 2012 16:28:57 GMT</pubDate></item><item><title><![CDATA[<a href="./api-for-dri-api">API for dri-api</a>]]></title><description><![CDATA[<h1>TOC</h1>
<ul>
<li><a href="#tests-for-dri-apiv2">Tests for DRI APIv2</a><ul>
<li><a href="#tests-for-dri-apiv2-get-">GET /</a></li>
<li><a href="#tests-for-dri-apiv2-post-devobjects-type--collection">POST /dev/objects type = collection</a></li>
<li><a href="#tests-for-dri-apiv2-post-devobjects-type--series">POST /dev/objects type = series</a></li>
<li><a href="#tests-for-dri-apiv2-post-devobjects-type--item">POST /dev/objects type = item</a></li>
<li><a href="#tests-for-dri-apiv2-put-devobjectsid">PUT /dev/objects/:id</a></li>
<li><a href="#tests-for-dri-apiv2-get-devobjects">GET /dev/objects</a></li>
<li><a href="#tests-for-dri-apiv2-get-devobjectsidlist">GET /dev/objects/:id/list</a>
<a name=""></a></li>
</ul>
</li>
</ul>
<p><a name="tests-for-dri-apiv2"></a>
</p>
<h1>Tests for DRI APIv2</h1>
<p><a name="tests-for-dri-apiv2-get-"></a>
</p>
<h2>GET /</h2>
<p>should respond with the root page, this is just a sanity check.

</p>
<pre><code class="js">            request({
                method : 'GET',
                uri : socket + '/'
            }, function(err, resp, body) {
                assert.isNull(err);
                assert.include(body, '&lt;title&gt;DRI API&lt;/title&gt;');
                done();
            });</code></pre>
<p><a name="tests-for-dri-apiv2-post-devobjects-type--collection"></a>
</p>
<h2>POST /dev/objects type = collection</h2>
<p>should respond with the id of the created object.

</p>
<pre><code class="js">
            request({
                method : 'POST',
                uri : socket + '/dev/objects',
                json : {
                    "status" : "Open",
                    "properties" : {
                        "title" : "AutoTestSeries",
                        "subtitle" : "AutoTestSeries"
                    },
                    "type" : "collection"
                }
            }, function(err, resp, body) {

                assert.isNull(err);
                assert.isDefined(body);
                assert.length(body, 24);
                collectionId = body;
                done();
            });</code></pre>
<p><a name="tests-for-dri-apiv2-post-devobjects-type--series"></a>
</p>
<h2>POST /dev/objects type = series</h2>
<p>should respond with the id of the created object.

</p>
<pre><code class="js">
            request({
                method : 'POST',
                uri : socket + '/dev/objects',
                json : {
                    "status" : "Open",
                    "properties" : {
                        "title" : "AutoTestItem",
                        "subtitle" : "AutoTestItem"
                    },
                    "type" : "series",
                    parentId:collectionId
                }
            }, function(err, resp, body) {

                assert.isNull(err);
                assert.isDefined(body);
                assert.length(body, 24);
                seriesId = body;
                done();
            });</code></pre>
<p><a name="tests-for-dri-apiv2-post-devobjects-type--item"></a>
</p>
<h2>POST /dev/objects type = item</h2>
<p>should respond with the id of the created object.

</p>
<pre><code class="js">
            request({
                method : 'POST',
                uri : socket + '/dev/objects',
                json : {
                    "status" : "Open",
                    "properties" : {
                        "title" : "AutoTestColl",
                        "subtitle" : "AutoTestColl"
                    },
                    "type" : "item",
                    parentId:seriesId
                }
            }, function(err, resp, body) {

                assert.isNull(err);
                assert.isDefined(body);
                assert.length(body, 24);
                itemId = body;
                done();
            });</code></pre>
<p><a name="tests-for-dri-apiv2-put-devobjectsid"></a>
</p>
<h2>PUT /dev/objects/:id</h2>
<p>should respond with the id of the updated object.

</p>
<pre><code class="js">            request({
                method : 'PUT',
                uri : socket + '/dev/objects/' + collectionId,
                json : {
                    properties : {
                        title : "I updated this collection"
                    }
                }
            }, function(err, resp, body) {
                assert.isNull(err);
                assert.equal(body, 1);
                assert.isDefined(body);
                done();
            });</code></pre>
<p><a name="tests-for-dri-apiv2-put-devobjectsid"></a>
</p>
<h2>PUT /dev/objects/:id</h2>
<p>should respond with the id of the updated object.

</p>
<pre><code class="js">            request({
                method : 'PUT',
                uri : socket + '/dev/objects/' + seriesId,
                json : {
                    properties : {
                        title : "I updated this series"
                    }
                }
            }, function(err, resp, body) {
                assert.isNull(err);
                assert.equal(body, 1);
                assert.isDefined(body);
                done();
            });</code></pre>
<p><a name="tests-for-dri-apiv2-put-devobjectsid"></a>
</p>
<h2>PUT /dev/objects/:id</h2>
<p>should respond with the id of the updated object.

</p>
<pre><code class="js">            request({
                method : 'PUT',
                uri : socket + '/dev/objects/' + itemId,
                json : {
                    properties : {
                        title : "I updated this item"
                    }
                }
            }, function(err, resp, body) {
                assert.isNull(err);
                assert.equal(body, 1);
                assert.isDefined(body);
                done();
            });</code></pre>
<p><a name="tests-for-dri-apiv2-get-devobjects"></a>
</p>
<h2>GET /dev/objects</h2>
<p>should respond with the an array with all the top level objects.

</p>
<pre><code class="js">            request({
                method : 'GET',
                uri : socket + '/dev/objects'
            }, function(err, resp, body) {
                assert.isNull(err);
                assert.include(body, '_id');
                done();
            });</code></pre>
<p><a name="tests-for-dri-apiv2-get-devobjectsidlist"></a>
</p>
<h2>GET /dev/objects/:id/list</h2>
<p>should respond with the an array with all the children items.

</p>
<pre><code class="js">            request({
                method : 'GET',
                uri : socket + '/dev/objects/'+collectionId+'/list'
            }, function(err, resp, body) {
                assert.isNull(err);
                assert.include(body, collectionId);
                done();
            });</code></pre>
]]></description><link>http://undefined/api-for-dri-api</link><guid isPermaLink="true">http://undefined/api-for-dri-api</guid><dc:creator><![CDATA[jtang]]></dc:creator><pubDate>Tue, 10 Apr 2012 13:25:30 GMT</pubDate></item><item><title><![CDATA[<a href="./api-for-node-fedora">API for node-fedora</a>]]></title><description><![CDATA[<h1>TOC</h1>
<ul>
<li><a href="#test-cases-for-the-node-fedora-package">Test cases for the node-fedora package</a><ul>
<li><a href="#test-cases-for-the-node-fedora-package-calling-createfedoraobject-will-create-a-fedoraobject">Calling createFedoraObject(), will create a fedoraObject</a></li>
<li><a href="#test-cases-for-the-node-fedora-package-calling-getfedoralist-get-a-list-of-fedoraobjects">Calling getFedoraList(), Get a list of fedoraObjects</a></li>
<li><a href="#test-cases-for-the-node-fedora-package-calling-getfedoraobject-get-a-fedoraobject">Calling getFedoraObject(), get a fedoraObject</a></li>
<li><a href="#test-cases-for-the-node-fedora-package-calling-deleteobject-will-delete-an-object-from-fedora">Calling deleteObject(), will delete an object from fedora</a></li>
<li><a href="#test-cases-for-the-node-fedora-package-calling-getnextpid-will-get-the-next-pid-that-is-available-from-fedora">Calling getNextPID(), will get the next PID that is available from fedora</a>
<a name=""></a></li>
</ul>
</li>
</ul>
<p><a name="test-cases-for-the-node-fedora-package"></a>
</p>
<h1>Test cases for the node-fedora package</h1>
<p><a name="test-cases-for-the-node-fedora-package-calling-createfedoraobject-will-create-a-fedoraobject"></a>
</p>
<h2>Calling createFedoraObject(), will create a fedoraObject</h2>
<p>should create a fedoraObject.

</p>
<pre><code class="js">            fedora.createFedoraObject(testNamespace, testLabel, function(result){
                testResult = result;
                result.should.exist;
                result.should.include(testNamespace + ":");
                done();
            });</code></pre>
<p><a name="test-cases-for-the-node-fedora-package-calling-getfedoralist-get-a-list-of-fedoraobjects"></a>
</p>
<h2>Calling getFedoraList(), Get a list of fedoraObjects</h2>
<p>should return a list of fedoraObjects from the fedora repository.

</p>
<pre><code class="js">            fedora.getFedoraList("*", function(resultData){
                resultData.should.exist;
                resultData.should.include('result');
                resultData.should.not.be.empty;
            }, 
            function(error){
                should.not.exist(error);
            });</code></pre>
<p><a name="test-cases-for-the-node-fedora-package-calling-getfedoraobject-get-a-fedoraobject"></a>
</p>
<h2>Calling getFedoraObject(), get a fedoraObject</h2>
<p>should return a fedoraObject.

</p>
<pre><code class="js">            fedora.getFedoraObject(testResult, function(resultData){
                resultData.should.include(testResult);
                done();
            });</code></pre>
<p><a name="test-cases-for-the-node-fedora-package-calling-deleteobject-will-delete-an-object-from-fedora"></a>
</p>
<h2>Calling deleteObject(), will delete an object from fedora</h2>
<p>should delete the requested object from fedora.

</p>
<pre><code class="js">            fedora.deleteObject(testResult, function(resultData){
                var myregexp = new RegExp("[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}.?[0-9]*Z");
                resultData.should.match(myregexp);
                done();
            }, function(error){
                should.not.exist(error);
            });</code></pre>
<p><a name="test-cases-for-the-node-fedora-package-calling-getnextpid-will-get-the-next-pid-that-is-available-from-fedora"></a>
</p>
<h2>Calling getNextPID(), will get the next PID that is available from fedora</h2>
<p>should return the next PID from fedora.

</p>
<pre><code class="js">            fedora.getNextPID("node", function(resultData){
                resultData.should.include("node:");
                done();
            });</code></pre>
]]></description><link>http://undefined/api-for-node-fedora</link><guid isPermaLink="true">http://undefined/api-for-node-fedora</guid><dc:creator><![CDATA[jtang]]></dc:creator><pubDate>Tue, 10 Apr 2012 13:21:17 GMT</pubDate></item><item><title><![CDATA[<a href="./api-for-node-dri">API for node-dri</a>]]></title><description><![CDATA[<h1>TOC</h1>
<ul>
<li><a href="#test-cases-for-node-dri-package">Test cases for node-dri package</a><ul>
<li><a href="#test-cases-for-node-dri-package-get-object-types">Get object types</a></li>
<li><a href="#test-cases-for-node-dri-package-creating-a-dri-collection">Creating a Dri-Collection</a></li>
<li><a href="#test-cases-for-node-dri-package-creating-a-series">Creating a Series</a></li>
<li><a href="#test-cases-for-node-dri-package-creating-an-item">Creating an Item</a></li>
<li><a href="#test-cases-for-node-dri-package-getting-an-item">Getting an Item</a></li>
<li><a href="#test-cases-for-node-dri-package-getting-a-series">Getting a Series</a></li>
<li><a href="#test-cases-for-node-dri-package-getting-a-series-children">Getting a Series children</a></li>
<li><a href="#test-cases-for-node-dri-package-getting-a-dri-collection">Getting a Dri-Collection</a></li>
<li><a href="#test-cases-for-node-dri-package-pushing-the-item-into-fedora">Pushing the item into fedora</a></li>
<li><a href="#test-cases-for-node-dri-package-removing-the-item-">Removing the item </a></li>
<li><a href="#test-cases-for-node-dri-package-removing-the-series-">Removing the series </a></li>
<li><a href="#test-cases-for-node-dri-package-removing-the-dri-collection-">Removing the dri-collection </a>
<a name=""></a></li>
</ul>
</li>
</ul>
<p><a name="test-cases-for-node-dri-package"></a>
</p>
<h1>Test cases for node-dri package</h1>
<p><a name="test-cases-for-node-dri-package-get-object-types"></a>
</p>
<h2>Get object types</h2>
<p>should return an array of all the object types.

</p>
<pre><code class="js">            dri.getObjectTypes(function(result) {
                result.should.be.ok
                done();
            }, function(e) {
                should.not.exist(e);
            });</code></pre>
<p><a name="test-cases-for-node-dri-package-creating-a-dri-collection"></a>
</p>
<h2>Creating a Dri-Collection</h2>
<p>should create a Dri-Collection and return the id of the Dri-Collection.

</p>
<pre><code class="js">            var data = {
                properties : {
                    title : "AutoTestColl" + rnd,
                    subtitle : "AutoTestColl" + rnd
                },
                status : "Open",
                type:"collection"
            };
            dri.createObject(data, function(result) {
                result.should.be.ok
                assert.length(result,24)
                collId = result;
                done();
            }, function(e) {
                should.not.exist(e);
            });</code></pre>
<p><a name="test-cases-for-node-dri-package-creating-a-series"></a>
</p>
<h2>Creating a Series</h2>
<p>should create a series and return the id of the series.

</p>
<pre><code class="js">            var data = {
                properties : {
                    title : "AutoTestSeries" + rnd,
                    subtitle : "AutoTestSeries" + rnd
                },
                status : "Open",
                type:"series",
                parentId: collId
            };
            dri.createObject(data, function(result) {
                result.should.be.ok
                assert.length(result,24)
                seriesId = result;
                done();
            }, function(e) {
                should.not.exist(e);
            });</code></pre>
<p><a name="test-cases-for-node-dri-package-creating-an-item"></a>
</p>
<h2>Creating an Item</h2>
<p>should create an Item and return the id of the Item.

</p>
<pre><code class="js">            var data = {
                properties : {
                    title : "AutoTestItem" + rnd,
                    subtitle : "AutoTestItem" + rnd
                },
                status : "Open",
                type:"item",
                parentId: seriesId
            };
            dri.createObject(data, function(result) {
                result.should.be.ok
                assert.length(result,24)
                itemId = result;
                done();
            }, function(e) {
                should.not.exist(e);
            });</code></pre>
<p><a name="test-cases-for-node-dri-package-getting-an-item"></a>
</p>
<h2>Getting an Item</h2>
<p>should get an Item and return the Item.

</p>
<pre><code class="js">            dri.getObject(itemId, function(result) {
                assert.include(result._id,itemId)
                done();
            }, function(e) {
                should.not.exist(e);
            });</code></pre>
<p><a name="test-cases-for-node-dri-package-getting-a-series"></a>
</p>
<h2>Getting a Series</h2>
<p>should get an Series and return the Series.

</p>
<pre><code class="js">            dri.getObject(seriesId, function(result) {
                assert.equal(seriesId, result._id);
                done();
            }, function(e) {
                should.not.exist(e);
            });</code></pre>
<p><a name="test-cases-for-node-dri-package-getting-a-series-children"></a>
</p>
<h2>Getting a Series children</h2>
<p>should get an Series and return the children.

</p>
<pre><code class="js">            dri.getChildren(seriesId, function(result) {
                assert.include(result[0],itemId);
                done();
            }, function(e) {
                should.not.exist(e);
            });</code></pre>
<p><a name="test-cases-for-node-dri-package-getting-a-dri-collection"></a>
</p>
<h2>Getting a Dri-Collection</h2>
<p>should get an Dri-Collection and return the Dri-Collection.

</p>
<pre><code class="js">            dri.getObject(collId, function(result) {
                assert.equal(collId, result._id);
                done();
            }, function(e) {
                should.not.exist(e);
            });</code></pre>
<p><a name="test-cases-for-node-dri-package-pushing-the-item-into-fedora"></a>
</p>
<h2>Pushing the item into fedora</h2>
<p>should push the item into fedora and return the fedora id from that item.

</p>
<pre><code class="js">            dri.approveItem(itemId, "cfedoraLib", function(pid) {
                pid.should.include(":");
                done();
            }, function(err) {
                should.not.exist(e);
                done();
            });</code></pre>
<p><a name="test-cases-for-node-dri-package-removing-the-item-"></a>
</p>
<h2>Removing the item</h2>
<p>should remove the item from MongoDB.

</p>
<pre><code class="js">            dri.removeObject(itemId, function(result) {
                assert.include(result,itemId)
                done();
            }, function(err) {
                should.not.exist(e);
                done();
            });</code></pre>
<p><a name="test-cases-for-node-dri-package-removing-the-series-"></a>
</p>
<h2>Removing the series</h2>
<p>should remove the series from MongoDB.

</p>
<pre><code class="js">            dri.removeObject(seriesId, function(result) {
                assert.include(result,seriesId)
                done();
            }, function(err) {
                should.not.exist(e);
                done();
            });</code></pre>
<p><a name="test-cases-for-node-dri-package-removing-the-dri-collection-"></a>
</p>
<h2>Removing the dri-collection</h2>
<p>should remove the dri-collection from MongoDB.

</p>
<pre><code class="js">            dri.removeObject(collId, function(result) {
                assert.include(result,collId)
                done();
            }, function(err) {
                should.not.exist(e);
                done();
            });</code></pre>
]]></description><link>http://undefined/api-for-node-dri</link><guid isPermaLink="true">http://undefined/api-for-node-dri</guid><dc:creator><![CDATA[jtang]]></dc:creator><pubDate>Tue, 10 Apr 2012 13:18:59 GMT</pubDate></item><item><title><![CDATA[<a href=".">DRIS Workflows</a>]]></title><description><![CDATA[<p>The DRIS Workflows package is a prototype system developed by some interns at TCHPC during the 2012 internship.

</p>
<h2>Primary authors of DRIS Workflows</h2>
<ul>
<li><a href="mailto:Matthias.Van.Wambeke@howest.be">Matthias.Van.Wambeke@howest.be</a></li>
<li><a href="mailto:Quirijn.Groot.Bluemink@howest.be">Quirijn.Groot.Bluemink@howest.be</a>

</li>
</ul>
<p>With help from the TCHPC and DRIS team at TCD.
</p>
]]></description><link>http://undefined.</link><guid isPermaLink="true">http://undefined.</guid><dc:creator><![CDATA[Jimmy Tang]]></dc:creator><pubDate>Thu, 29 Mar 2012 08:55:54 GMT</pubDate></item><item><title><![CDATA[DRIS Workflows -- Untitled]]></title><link>http://undefined/all-pages</link><guid isPermaLink="true">http://undefined/all-pages</guid><dc:creator><![CDATA[TCHPC]]></dc:creator><pubDate>Thu, 01 Jan 1970 00:00:00 GMT</pubDate></item></channel></rss>