<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[DRIS Workflows]]></title><description><![CDATA[DRIS Workflow documentation pages]]></description><link>http://github.com/dylan/node-rss</link><generator>NodeJS RSS Module</generator><lastBuildDate>Fri, 01 Jun 2012 12:01:33 GMT</lastBuildDate><atom:link href="/feed.xml" rel="self" type="application/rss+xml"/><item><title><![CDATA[<a href="./contact">contact</a>]]></title><description><![CDATA[<p>People to contact for more information relating to the work that was carried out.

</p>
<h2>HOWEST</h2>
<ul>
<li>Groot Bluemink Quirijn <a href="mailto:Quirijn.Groot.Bluemink@howest.be">Quirijn.Groot.Bluemink@howest.be</a></li>
<li>Van Wambeke Matthias <a href="mailto:Matthias.Van.Wambeke@howest.be">Matthias.Van.Wambeke@howest.be</a></li>
</ul>
<h2>TCHPC, Trinity College Dublin</h2>
<ul>
<li>Jimmy Tang <a href="mailto:jtang@tchpc.tcd.ie">jtang@tchpc.tcd.ie</a> - 01-896-4466 - 086-3135905</li>
<li>Darach Golden <a href="mailto:darach@tchpc.tcd.ie">darach@tchpc.tcd.ie</a> - 01-896-3847 - 087-8229592</li>
</ul>
<h2>DRIS, Trinity College Dublin</h2>
<ul>
<li>DRIS Contacts not listed until permission is granted</li>
</ul>
]]></description><link>http://undefined/contact</link><guid isPermaLink="true">http://undefined/contact</guid><dc:creator><![CDATA[jtang]]></dc:creator><pubDate>Tue, 10 Apr 2012 16:28:57 GMT</pubDate></item><item><title><![CDATA[<a href="./api-for-dri-api">API for dri-api</a>]]></title><description><![CDATA[<p>make[2]: Entering directory `/data/home/jtang/develop/dris-workflows-site/build/dri-api'
MongoDB: <a href="mongodb://localhost/dri">mongodb://localhost/dri</a>
DRI package configured
info: result
</p>
<h1>TOC</h1>
<ul>
<li><a href="#tests-for-dri-apiv2">Tests for DRI APIv2</a><ul>
<li><a href="#tests-for-dri-apiv2-get-">GET /</a></li>
<li><a href="#tests-for-dri-apiv2-post-devobjects-type--collection">POST /dev/objects type = collection</a></li>
<li><a href="#tests-for-dri-apiv2-post-devobjects-type--series">POST /dev/objects type = series</a></li>
<li><a href="#tests-for-dri-apiv2-post-devobjects-type--item">POST /dev/objects type = item</a></li>
<li><a href="#tests-for-dri-apiv2-post-devupload-type--item-with-binary-object">POST /dev/upload type = item with binary object</a></li>
<li><a href="#tests-for-dri-apiv2-post-devobjectsidupdate">POST /dev/objects/:id/update</a></li>
<li><a href="#tests-for-dri-apiv2-get-devobjects">GET /dev/objects</a></li>
<li><a href="#tests-for-dri-apiv2-get-devobjectsid">GET /dev/objects/:id</a></li>
<li><a href="#tests-for-dri-apiv2-get-devobjectsiddc">GET /dev/objects/:id.dc</a></li>
<li><a href="#tests-for-dri-apiv2-get-devobjectsidlist">GET /dev/objects/:id/list</a></li>
<li><a href="#tests-for-dri-apiv2-get-devobjectsidapprove">GET /dev/objects/:id/approve</a></li>
<li><a href="#tests-for-dri-apiv2-get-devstats">GET /dev/stats</a></li>
<li><a href="#tests-for-dri-apiv2-get-devstatsapproved">GET /dev/stats/approved</a></li>
<li><a href="#tests-for-dri-apiv2-get-devstatsopen">GET /dev/stats/open</a></li>
<li><a href="#tests-for-dri-apiv2-get-devstatslastedited">GET /dev/stats/lastedited</a></li>
<li><a href="#tests-for-dri-apiv2-get-devstatslastcreated">GET /dev/stats/lastcreated</a></li>
<li><a href="#tests-for-dri-apiv2-get-devobjectsiddelete">GET /dev/objects/:id/delete</a>
<a name=""></a></li>
</ul>
</li>
</ul>
<p><a name="tests-for-dri-apiv2"></a>
</p>
<h1>Tests for DRI APIv2</h1>
<p><a name="tests-for-dri-apiv2-get-"></a>
</p>
<h2>GET /</h2>
<p>should respond with the root page, this is just a sanity check.

</p>
<pre><code class="js">            request({
                method : 'GET',
                uri : socket + '/'
            }, function(err, resp, body) {
                assert.isNull(err);
                assert.include(body, '&lt;title&gt;DRI API&lt;/title&gt;');
                done();
            });</code></pre>
<p><a name="tests-for-dri-apiv2-post-devobjects-type--collection"></a>
</p>
<h2>POST /dev/objects type = collection</h2>
<p>should respond with the id of the created object.

</p>
<pre><code class="js">
            request({
                method : 'POST',
                uri : socket + '/dev/objects',
                json : {
                    status : "open",
                    type : "collection",
                    properties : {
                        titleInfo : [{
                            title : "This is a Collection title!"
                        }]
                    }
                }
            }, function(err, resp, body) {
                assert.isNull(err);
                assert.isDefined(body);
                assert.lengthOf(body, 24);
                collectionId = body;
                done();
            });</code></pre>
<p><a name="tests-for-dri-apiv2-post-devobjects-type--series"></a>
</p>
<h2>POST /dev/objects type = series</h2>
<p>should respond with the id of the created object.

</p>
<pre><code class="js">
            request({
                method : 'POST',
                uri : socket + '/dev/objects',
                json : {
                    status : "open",
                    type : "series",
                    properties : {
                        titleInfo : [{
                            title : "This is a Series title!"
                        }]
                    },
                    parentId : collectionId
                }
            }, function(err, resp, body) {
                assert.isNull(err);
                assert.isDefined(body);
                assert.lengthOf(body, 24);
                seriesId = body;
                done();
            });</code></pre>
<p><a name="tests-for-dri-apiv2-post-devobjects-type--item"></a>
</p>
<h2>POST /dev/objects type = item</h2>
<p>should respond with the id of the created object.

</p>
<pre><code class="js">            request({
                method : 'POST',
                uri : socket + '/dev/objects',
                json : {
                    status : "open",
                    properties : {
                        titleInfo : [{
                            title : "This is a item title!"
                        }]
                    },
                    "type" : "item",
                    parentId : seriesId
                }
            }, function(err, resp, body) {
                assert.isNull(err);
                assert.isDefined(body);
                assert.lengthOf(body, 24);
                itemId = body;
                done();
            });</code></pre>
<p><a name="tests-for-dri-apiv2-post-devupload-type--item-with-binary-object"></a>
</p>
<h2>POST /dev/upload type = item with binary object</h2>
<p>should respond with the path of the uploaded file.

</p>
<pre><code class="js">            var req = superagent.post(socket + '/dev/upload').attach(__dirname + '/car.jpg', 'upload')
            req.end(function(resp) {
                assert.isDefined(resp.text);
                assert.include(resp, "car.jpg");
                done();
            });</code></pre>
<p><a name="tests-for-dri-apiv2-post-devobjectsidupdate"></a>
</p>
<h2>POST /dev/objects/:id/update</h2>
<p>should respond with the id of the updated object.

</p>
<pre><code class="js">            request({
                method : 'POST',
                uri : socket + '/dev/objects/' + collectionId + '/update',
                json : {
                    status : "open",
                    properties : {
                        titleInfo : [{
                            title : "This is a updated collection title!"
                        }]
                    }
                }
            }, function(err, resp, body) {
                assert.isNull(err);
                assert.equal(body, 1);
                assert.isDefined(body);
                done();
            });</code></pre>
<p><a name="tests-for-dri-apiv2-post-devobjectsidupdate"></a>
</p>
<h2>POST /dev/objects/:id/update</h2>
<p>should respond with the id of the updated object.

</p>
<pre><code class="js">            request({
                method : 'POST',
                uri : socket + '/dev/objects/' + seriesId + '/update',
                json : {
                    status : "open",
                    properties : {
                        titleInfo : [{
                            title : "This is a updated series title!"
                        }]
                    }
                }
            }, function(err, resp, body) {
                assert.isNull(err);
                assert.equal(body, 1);
                assert.isDefined(body);
                done();
            });</code></pre>
<p><a name="tests-for-dri-apiv2-post-devobjectsidupdate"></a>
</p>
<h2>POST /dev/objects/:id/update</h2>
<p>should respond with the id of the updated object.

</p>
<pre><code class="js">            request({
                method : 'POST',
                uri : socket + '/dev/objects/' + itemId + '/update',
                json : {
                    status : "open",
                    properties : {
                        titleInfo : [{
                            title : "This is a updated item title!"
                        }]
                    }
                }
            }, function(err, resp, body) {
                assert.isNull(err);
                assert.equal(body, 1);
                assert.isDefined(body);
                done();
            });</code></pre>
<p><a name="tests-for-dri-apiv2-get-devobjects"></a>
</p>
<h2>GET /dev/objects</h2>
<p>should respond with the an array with all the top level objects.

</p>
<pre><code class="js">            request({
                method : 'GET',
                uri : socket + '/dev/objects'
            }, function(err, resp, body) {
                assert.isNull(err);
                assert.include(body, '_id');
                done();
            });</code></pre>
<p><a name="tests-for-dri-apiv2-get-devobjectsid"></a>
</p>
<h2>GET /dev/objects/:id</h2>
<p>should respond with the JSON of the selected object.

</p>
<pre><code class="js">            request({
                method : 'GET',
                uri : socket + '/dev/objects/' + collectionId
            }, function(err, resp, body) {
                assert.isNull(err);
                assert.include(body, collectionId);
                assert.include(body, 'updated');
                done();
            });</code></pre>
<p><a name="tests-for-dri-apiv2-get-devobjectsiddc"></a>
</p>
<h2>GET /dev/objects/:id.dc</h2>
<p>should respond with the Dublin core XML of the selected object.

</p>
<pre><code class="js">            request({
                method : 'GET',
                uri : socket + '/dev/objects/' + collectionId + '.dc'
            }, function(err, resp, body) {
                assert.isNull(err);
                assert.include(body, collectionId);
                assert.include(body, 'dc:');
                done();
            });</code></pre>
<p><a name="tests-for-dri-apiv2-get-devobjectsidlist"></a>
</p>
<h2>GET /dev/objects/:id/list</h2>
<p>should respond with the an array with all the children items.

</p>
<pre><code class="js">            request({
                method : 'GET',
                uri : socket + '/dev/objects/' + collectionId + '/list'
            }, function(err, resp, body) {
                assert.isNull(err);
                assert.include(body, collectionId);
                done();
            });</code></pre>
<p><a name="tests-for-dri-apiv2-get-devobjectsidapprove"></a>
</p>
<h2>GET /dev/objects/:id/approve</h2>
<p>should respond with the Fedora pid.

</p>
<pre><code class="js">            request({
                method : 'GET',
                uri : socket + '/dev/objects/' + collectionId + '/approve'
            }, function(err, resp, body) {
                assert.isNull(err);
                assert.include(body, "This is a updated collection title!");
                done();
            });</code></pre>
<p><a name="tests-for-dri-apiv2-get-devstats"></a>
</p>
<h2>GET /dev/stats</h2>
<p>should respond with the total amount of objects in mongodb.

</p>
<pre><code class="js">            request({
                method : 'GET',
                uri : socket + '/dev/stats'
            }, function(err, resp, body) {
                assert.isNull(err);
                assert.isString(body);
                done();
            });</code></pre>
<p><a name="tests-for-dri-apiv2-get-devstatsapproved"></a>
</p>
<h2>GET /dev/stats/approved</h2>
<p>should respond with the total amount of objects in mongodb that have been pushed to fedora.

</p>
<pre><code class="js">            request({
                method : 'GET',
                uri : socket + '/dev/stats/approved'
            }, function(err, resp, body) {
                assert.isNull(err);
                assert.isString(body);
                done();
            });</code></pre>
<p><a name="tests-for-dri-apiv2-get-devstatsopen"></a>
</p>
<h2>GET /dev/stats/open</h2>
<p>should respond with the total amount of objects in mongodb that are open.

</p>
<pre><code class="js">            request({
                method : 'GET',
                uri : socket + '/dev/objects/stats/open'
            }, function(err, resp, body) {
                assert.isNull(err);
                assert.isString(body);
                done();
            });</code></pre>
<p><a name="tests-for-dri-apiv2-get-devstatslastedited"></a>
</p>
<h2>GET /dev/stats/lastedited</h2>
<p>should respond with a list of the last edited objects.

</p>
<pre><code class="js">            request({
                method : 'GET',
                uri : socket + '/dev/stats/lastedited'
            }, function(err, resp, body) {
                assert.isNull(err);
                assert.isString(body);
                done();
            });</code></pre>
<p><a name="tests-for-dri-apiv2-get-devstatslastcreated"></a>
</p>
<h2>GET /dev/stats/lastcreated</h2>
<p>should respond with a list of the last created objects.

</p>
<pre><code class="js">            request({
                method : 'GET',
                uri : socket + '/dev/stats/lastcreated'
            }, function(err, resp, body) {
                assert.isNull(err);
                assert.isString(body);
                done();
            });</code></pre>
<p><a name="tests-for-dri-apiv2-get-devobjectsiddelete"></a>
</p>
<h2>GET /dev/objects/:id/delete</h2>
<p>should respond with the id of the deleted object.

</p>
<pre><code class="js">            request({
                method : 'GET',
                uri : socket + '/dev/objects/' + collectionId + '/delete'
            }, function(err, resp, body) {
                assert.isNull(err);
                assert.include(body, collectionId);
                done();
            });</code></pre>
<p><a name="tests-for-dri-apiv2-get-devobjectsiddelete"></a>
</p>
<h2>GET /dev/objects/:id/delete</h2>
<p>should respond with the id of the deleted object.

</p>
<pre><code class="js">            request({
                method : 'GET',
                uri : socket + '/dev/objects/' + seriesId + '/delete'
            }, function(err, resp, body) {
                assert.isNull(err);
                assert.include(body, seriesId);
                done();
            });</code></pre>
<p><a name="tests-for-dri-apiv2-get-devobjectsiddelete"></a>
</p>
<h2>GET /dev/objects/:id/delete</h2>
<p>should respond with the id of the deleted object.

</p>
<pre><code class="js">            request({
                method : 'GET',
                uri : socket + '/dev/objects/' + itemId + '/delete'
            }, function(err, resp, body) {
                assert.isNull(err);
                assert.include(body, itemId);
                done();
            });</code></pre>
<p>make[2]: Leaving directory `/data/home/jtang/develop/dris-workflows-site/build/dri-api'
</p>
]]></description><link>http://undefined/api-for-dri-api</link><guid isPermaLink="true">http://undefined/api-for-dri-api</guid><dc:creator><![CDATA[jtang]]></dc:creator><pubDate>Tue, 10 Apr 2012 13:25:30 GMT</pubDate></item><item><title><![CDATA[<a href="./api-for-node-fedora">API for node-fedora</a>]]></title><description><![CDATA[<p>make[2]: Entering directory `/data/home/jtang/develop/dris-workflows-site/build/node-fedora'
info: Fedora package configured
</p>
<h1>TOC</h1>
<ul>
<li><a href="#test-cases-for-the-node-fedora-package">Test cases for the node-fedora package</a><ul>
<li><a href="#test-cases-for-the-node-fedora-package-calling-createfedoraobject-will-create-a-fedoraobject">Calling createFedoraObject(), will create a fedoraObject</a></li>
<li><a href="#test-cases-for-the-node-fedora-package-calling-getfedoralist-get-a-list-of-fedoraobjects">Calling getFedoraList(), Get a list of fedoraObjects</a></li>
<li><a href="#test-cases-for-the-node-fedora-package-calling-getfedoraobject-get-a-fedoraobject">Calling getFedoraObject(), get a fedoraObject</a></li>
<li><a href="#test-cases-for-the-node-fedora-package-calling-addxmldatastream-to-add-a-datastream-to-an-existing-fedoraobject">Calling addXMLDatastream(), to add a Datastream to an existing fedoraObject</a></li>
<li><a href="#test-cases-for-the-node-fedora-package-calling-modifyxmldatastream-to-add-a-datastream-to-an-existing-fedoraobject">Calling modifyXMLDatastream(), to add a Datastream to an existing fedoraObject</a></li>
<li><a href="#test-cases-for-the-node-fedora-package-calling-addmediadatastream-to-add-a-datastream-to-an-existing-fedoraobject">Calling addMediaDatastream(), to add a Datastream to an existing fedoraObject</a></li>
<li><a href="#test-cases-for-the-node-fedora-package-calling-modifymediadatastream-to-add-a-datastream-to-an-existing-fedoraobject">Calling modifyMediaDatastream(), to add a Datastream to an existing fedoraObject</a></li>
<li><a href="#test-cases-for-the-node-fedora-package-calling-deleteobject-will-delete-an-object-from-fedora">Calling deleteObject(), will delete an object from fedora</a></li>
<li><a href="#test-cases-for-the-node-fedora-package-calling-getnextpid-will-get-the-next-pid-that-is-available-from-fedora">Calling getNextPID(), will get the next PID that is available from fedora</a>
<a name=""></a></li>
</ul>
</li>
</ul>
<p><a name="test-cases-for-the-node-fedora-package"></a>
</p>
<h1>Test cases for the node-fedora package</h1>
<p><a name="test-cases-for-the-node-fedora-package-calling-createfedoraobject-will-create-a-fedoraobject"></a>
</p>
<h2>Calling createFedoraObject(), will create a fedoraObject</h2>
<p>should create a fedoraObject.

</p>
<pre><code class="js">            fedora.createFedoraObject(testNamespace, testLabel, function(result) {
                testResult = result;
                result.should.exist
                result.should.include(testNamespace + ":");
                done();
            });</code></pre>
<p><a name="test-cases-for-the-node-fedora-package-calling-getfedoralist-get-a-list-of-fedoraobjects"></a>
</p>
<h2>Calling getFedoraList(), Get a list of fedoraObjects</h2>
<p>should return a list of fedoraObjects from the fedora repository.

</p>
<pre><code class="js">            fedora.getFedoraList("*", function(resultData) {
                resultData.should.exist
                resultData.should.include('result');
                resultData.should.not.be.empty
            }, function(error) {
                should.not.exist(error);
            });</code></pre>
<p><a name="test-cases-for-the-node-fedora-package-calling-getfedoraobject-get-a-fedoraobject"></a>
</p>
<h2>Calling getFedoraObject(), get a fedoraObject</h2>
<p>should return a fedoraObject.

</p>
<pre><code class="js">            fedora.getFedoraObject(testResult, function(resultData) {
                resultData.should.include(testResult);
                done();
            });</code></pre>
<p><a name="test-cases-for-the-node-fedora-package-calling-addxmldatastream-to-add-a-datastream-to-an-existing-fedoraobject"></a>
</p>
<h2>Calling addXMLDatastream(), to add a Datastream to an existing fedoraObject</h2>
<p>should return the datastream.

</p>
<pre><code class="js">            var data = '&lt;oai_dc:dc xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd"&gt;&lt;dc:title&gt;jhdgj&lt;/dc:title&gt;&lt;dc:identifier&gt;4f8ffc8ff889d6ab44000001&lt;/dc:identifier&gt;&lt;/oai_dc:dc&gt;'

            fedora.addXMLDatastream(testResult, "DC", data, function(resultData) {
                resultData.should.include(testResult);
                done();
            }, function(err) {
                console.log(err);
            });</code></pre>
<p><a name="test-cases-for-the-node-fedora-package-calling-modifyxmldatastream-to-add-a-datastream-to-an-existing-fedoraobject"></a>
</p>
<h2>Calling modifyXMLDatastream(), to add a Datastream to an existing fedoraObject</h2>
<p>should return the datastream.

</p>
<pre><code class="js">            var data = '&lt;oai_dc:dc xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd"&gt;&lt;dc:title&gt;jhdgj - updated!&lt;/dc:title&gt;&lt;dc:identifier&gt;4f8ffc8ff889d6ab44000001&lt;/dc:identifier&gt;&lt;/oai_dc:dc&gt;'
            fedora.modifyXMLDatastream(testResult, "DC", data, function(resultData) {
                resultData.should.include(testResult);
                done();
            }, function(err) {
                console.log(err);
            });</code></pre>
<p><a name="test-cases-for-the-node-fedora-package-calling-addmediadatastream-to-add-a-datastream-to-an-existing-fedoraobject"></a>
</p>
<h2>Calling addMediaDatastream(), to add a Datastream to an existing fedoraObject</h2>
<p>should return the datastream.

</p>
<pre><code class="js">            var data = {
                fileLocation: '05b503d8db65a2a3c44db01e89eb53a9421edd8c/Electric_Car.jpg'
            }
            fedora.addMediaDatastream(testResult, "IMAGE", data, function(resultData) {
                resultData.should.include(testResult);
                done();
            }, function(err) {
                console.log(err);
            });</code></pre>
<p><a name="test-cases-for-the-node-fedora-package-calling-modifymediadatastream-to-add-a-datastream-to-an-existing-fedoraobject"></a>
</p>
<h2>Calling modifyMediaDatastream(), to add a Datastream to an existing fedoraObject</h2>
<p>should return the datastream.

</p>
<pre><code class="js">            var data = {
                fileLocation: '05b503d8db65a2a3c44db01e89eb53a9421edd8c/Electric_Car.jpg'
            }
            fedora.modifyMediaDatastream(testResult, "IMAGE", data, function(resultData) {
                resultData.should.include(testResult);
                done();
            }, function(err) {
                console.log(err);
            });</code></pre>
<p><a name="test-cases-for-the-node-fedora-package-calling-deleteobject-will-delete-an-object-from-fedora"></a>
</p>
<h2>Calling deleteObject(), will delete an object from fedora</h2>
<p>should delete the requested object from fedora.

</p>
<pre><code class="js">            fedora.deleteObject(testResult, function(resultData) {
                var myregexp = new RegExp("[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}.?[0-9]*Z");
                resultData.should.match(myregexp);
                done();
            }, function(error) {
                should.not.exist(error);
            });</code></pre>
<p><a name="test-cases-for-the-node-fedora-package-calling-getnextpid-will-get-the-next-pid-that-is-available-from-fedora"></a>
</p>
<h2>Calling getNextPID(), will get the next PID that is available from fedora</h2>
<p>should return the next PID from fedora.

</p>
<pre><code class="js">            fedora.getNextPID("node", function(resultData) {
                resultData.should.include("node:");
                done();
            });</code></pre>
<p>make[2]: Leaving directory `/data/home/jtang/develop/dris-workflows-site/build/node-fedora'
</p>
]]></description><link>http://undefined/api-for-node-fedora</link><guid isPermaLink="true">http://undefined/api-for-node-fedora</guid><dc:creator><![CDATA[jtang]]></dc:creator><pubDate>Tue, 10 Apr 2012 13:21:17 GMT</pubDate></item><item><title><![CDATA[<a href="./api-for-node-dri">API for node-dri</a>]]></title><description><![CDATA[<p>make[2]: Entering directory `/data/home/jtang/develop/dris-workflows-site/build/node-dri'
info: MongoDB: <a href="mongodb://localhost/dri">mongodb://localhost/dri</a>
info: DRI package configured
info: Fetched items
</p>
<h1>TOC</h1>
<ul>
<li><a href="#test-cases-for-node-dri-package">Test cases for node-dri package</a><ul>
<li><a href="#test-cases-for-node-dri-package-calling-getobjecttypesonsuccess-onerror-will-get-object-types">Calling getObjectTypes(onSuccess, onError), will get object types</a></li>
<li><a href="#test-cases-for-node-dri-package-calling-createobjectdata-onsuccess-onerror-to-create-a-collection">Calling createObject(data, onSuccess, onError) to create a collection</a></li>
<li><a href="#test-cases-for-node-dri-package-calling-createobjectdata-onsuccess-onerror-to-create-a-series">Calling createObject(data, onSuccess, onError) to create a series</a></li>
<li><a href="#test-cases-for-node-dri-package-calling-createobjectdata-onsuccess-onerror-to-create-an-item">Calling createObject(data, onSuccess, onError) to create an item</a></li>
<li><a href="#test-cases-for-node-dri-package-calling-updateobjectid-data-onsuccess-onerror-to-create-an-item">Calling updateObject(id, data, onSuccess, onError) to create an item</a></li>
<li><a href="#test-cases-for-node-dri-package-calling-getobjectid-onsuccess-onerror-to-get-an-item">Calling getObject(id, onSuccess, onError) to get an item</a></li>
<li><a href="#test-cases-for-node-dri-package-calling-getobjectid-onsuccess-onerror-to-get-an-item-and-convert-to-dublin-core">Calling getObject(id, onSuccess, onError) to get an item and convert to Dublin Core</a></li>
<li><a href="#test-cases-for-node-dri-package-calling-getobjectid-onsuccess-onerror-to-get-an-item-and-convert-to-mods">Calling getObject(id, onSuccess, onError) to get an item and convert to MODS</a></li>
<li><a href="#test-cases-for-node-dri-package-calling-getobjectid-onsuccess-onerror-to-get-a-series">Calling getObject(id, onSuccess, onError) to get a Series</a></li>
<li><a href="#test-cases-for-node-dri-package-calling-getchildrenparentid-onsuccess-onerror-to-get-the-children-of-a-series">Calling getChildren(parentId, onSuccess, onError) to get the children of a series</a></li>
<li><a href="#test-cases-for-node-dri-package-calling-getobjectid-onsuccess-onerror-to-get-a-collection">Calling getObject(id, onSuccess, onError) to get a collection</a></li>
<li><a href="#test-cases-for-node-dri-package-calling-approveitemid-fedoranamespace-onsuccess-onerror-with-a-item-id">Calling approveItem(id, fedoraNamespace, onSuccess, onError) with a item id</a></li>
<li><a href="#test-cases-for-node-dri-package-calling-countobjectsoptions-onsuccess-onerror-with-no-options">Calling countObjects(options, onSuccess, onError) with no options</a></li>
<li><a href="#test-cases-for-node-dri-package-calling-queryfield-value-onsuccess-onerror-">Calling query(field, value, onSuccess, onError) </a></li>
<li><a href="#test-cases-for-node-dri-package-calling-lastcreatedonsuccess-onerror-">Calling lastCreated(onSuccess, onError) </a></li>
<li><a href="#test-cases-for-node-dri-package-calling-lasteditedonsuccess-onerror-">Calling lastEdited(onSuccess, onError) </a></li>
<li><a href="#test-cases-for-node-dri-package-calling-lastcreatedbytypetype-onsuccess-onerror-">Calling lastCreatedByType(type, onSuccess, onError) </a></li>
<li><a href="#test-cases-for-node-dri-package-calling-lasteditedbytypetype-onsuccess-onerror-">Calling lastEditedByType(type, onSuccess, onError) </a></li>
<li><a href="#test-cases-for-node-dri-package-calling-removeobjectid-onsuccess-onerror-with-a-item-id">Calling removeObject(id, onSuccess, onError) with a item id</a></li>
<li><a href="#test-cases-for-node-dri-package-calling-removeobjectid-onsuccess-onerror-with-a-series-id">Calling removeObject(id, onSuccess, onError) with a series id</a></li>
<li><a href="#test-cases-for-node-dri-package-calling-removeobjectid-onsuccess-onerror-with-a-collection-id">Calling removeObject(id, onSuccess, onError) with a collection id</a>
<a name=""></a></li>
</ul>
</li>
</ul>
<p><a name="test-cases-for-node-dri-package"></a>
</p>
<h1>Test cases for node-dri package</h1>
<p><a name="test-cases-for-node-dri-package-calling-getobjecttypesonsuccess-onerror-will-get-object-types"></a>
</p>
<h2>Calling getObjectTypes(onSuccess, onError), will get object types</h2>
<p>should return an array of all the object types.

</p>
<pre><code class="js">            dri.getObjectTypes(function(result) {
                result.should.be.ok
                done();
            }, function(e) {
                should.not.exist(e);
            });</code></pre>
<p><a name="test-cases-for-node-dri-package-calling-createobjectdata-onsuccess-onerror-to-create-a-collection"></a>
</p>
<h2>Calling createObject(data, onSuccess, onError) to create a collection</h2>
<p>should create a collection and return the id of the collection.

</p>
<pre><code class="js">            data.type = "collection"
            dri.createObject(data, function(result) {
                result.should.be.ok
                assert.lengthOf(result, 24)
                collId = result;
                done();
            }, function(e) {
                should.not.exist(e);
            });</code></pre>
<p><a name="test-cases-for-node-dri-package-calling-createobjectdata-onsuccess-onerror-to-create-a-series"></a>
</p>
<h2>Calling createObject(data, onSuccess, onError) to create a series</h2>
<p>should create a series and return the id of the series.

</p>
<pre><code class="js">
            data.type = "series"
            data.parentId = collId

            dri.createObject(data, function(result) {
                result.should.be.ok
                assert.lengthOf(result, 24)
                seriesId = result;
                done();
            }, function(e) {
                should.not.exist(e);
            });</code></pre>
<p><a name="test-cases-for-node-dri-package-calling-createobjectdata-onsuccess-onerror-to-create-an-item"></a>
</p>
<h2>Calling createObject(data, onSuccess, onError) to create an item</h2>
<p>should create an Item and return the id of the Item.

</p>
<pre><code class="js">
            data.type = "item"
            data.parentId = seriesId
            dri.createObject(data, function(result) {
                result.should.be.ok
                assert.lengthOf(result, 24)
                itemId = result;
                done();
            }, function(e) {
                should.not.exist(e);
            });</code></pre>
<p><a name="test-cases-for-node-dri-package-calling-updateobjectid-data-onsuccess-onerror-to-create-an-item"></a>
</p>
<h2>Calling updateObject(id, data, onSuccess, onError) to create an item</h2>
<p>should updat an Item and return the id of the Item.

</p>
<pre><code class="js">            data.properties.titleInfo[0].title = "updated title"
            dri.updateObject(itemId ,data, function(result) {
                result.should.be.ok
                assert.include(result._id, itemId)
                assert.include(result, "updated title")
                done();
            }, function(e) {
                should.not.exist(e);
            });</code></pre>
<p><a name="test-cases-for-node-dri-package-calling-getobjectid-onsuccess-onerror-to-get-an-item"></a>
</p>
<h2>Calling getObject(id, onSuccess, onError) to get an item</h2>
<p>should get an Item and return the Item.

</p>
<pre><code class="js">            dri.getObject(itemId, function(result) {
                assert.include(result._id, itemId)
                done();
            }, function(e) {
                should.not.exist(e);
            });</code></pre>
<p><a name="test-cases-for-node-dri-package-calling-getobjectid-onsuccess-onerror-to-get-an-item-and-convert-to-dublin-core"></a>
</p>
<h2>Calling getObject(id, onSuccess, onError) to get an item and convert to Dublin Core</h2>
<p>should get an Item and return the Item in DC.

</p>
<pre><code class="js">            dri.getObject(itemId, function(result) {
                var dc = dri.convertToDC(result)
                assert.include(dc, itemId)
                done();
            }, function(e) {
                should.not.exist(e);
            });</code></pre>
<p><a name="test-cases-for-node-dri-package-calling-getobjectid-onsuccess-onerror-to-get-an-item-and-convert-to-mods"></a>
</p>
<h2>Calling getObject(id, onSuccess, onError) to get an item and convert to MODS</h2>
<p>should get an Item and return the Item in MODS.

</p>
<pre><code class="js">            dri.getObject(itemId, function(result) {
                var dc = dri.convertToMODS(result)
                assert.include(dc, itemId)
                done();
            }, function(e) {
                should.not.exist(e);
            });</code></pre>
<p><a name="test-cases-for-node-dri-package-calling-getobjectid-onsuccess-onerror-to-get-a-series"></a>
</p>
<h2>Calling getObject(id, onSuccess, onError) to get a Series</h2>
<p>should get an series and return the series.

</p>
<pre><code class="js">            dri.getObject(seriesId, function(result) {
                assert.equal(seriesId, result._id);
                done();
            }, function(e) {
                should.not.exist(e);
            });</code></pre>
<p><a name="test-cases-for-node-dri-package-calling-getchildrenparentid-onsuccess-onerror-to-get-the-children-of-a-series"></a>
</p>
<h2>Calling getChildren(parentId, onSuccess, onError) to get the children of a series</h2>
<p>should get the series and return the children.

</p>
<pre><code class="js">            dri.getChildren(seriesId, 0, 20, function(result) {
                assert.include(result[0], itemId);
                done();
            }, function(e) {
                should.not.exist(e);
            });</code></pre>
<p><a name="test-cases-for-node-dri-package-calling-getobjectid-onsuccess-onerror-to-get-a-collection"></a>
</p>
<h2>Calling getObject(id, onSuccess, onError) to get a collection</h2>
<p>should get a collection and return the collection.

</p>
<pre><code class="js">            dri.getObject(collId, function(result) {
                assert.equal(collId, result._id);
                done();
            }, function(e) {
                should.not.exist(e);
            });</code></pre>
<p><a name="test-cases-for-node-dri-package-calling-approveitemid-fedoranamespace-onsuccess-onerror-with-a-item-id"></a>
</p>
<h2>Calling approveItem(id, fedoraNamespace, onSuccess, onError) with a item id</h2>
<p>should push the item into fedora and return the fedora id from that item.

</p>
<pre><code class="js">            dri.approveItem(itemId, "afedoraLib", function(pid) {
                pid.should.include(":");
                done();
            }, function(err) {
                should.not.exist(e);
                done();
            });</code></pre>
<p><a name="test-cases-for-node-dri-package-calling-countobjectsoptions-onsuccess-onerror-with-no-options"></a>
</p>
<h2>Calling countObjects(options, onSuccess, onError) with no options</h2>
<p>should return the amount of objects in MongoDB.

</p>
<pre><code class="js">            dri.countObjects({}, function(amount) {
                assert.isNumber(amount)
                done();
            }, function(err) {
                should.not.exist(e);
                done();
            });</code></pre>
<p><a name="test-cases-for-node-dri-package-calling-queryfield-value-onsuccess-onerror-"></a>
</p>
<h2>Calling query(field, value, onSuccess, onError)</h2>
<p>should return an array containing objects that contain the searched field.

</p>
<pre><code class="js">            dri.query("label", "50c25df5b", function(data) {
                should.exist(data)
                assert.include(data[0], "label");
                assert.include(data[0], "e2f");
                done();
            }, function(err) {
                should.not.exist(e);
                done();
            });</code></pre>
<p><a name="test-cases-for-node-dri-package-calling-lastcreatedonsuccess-onerror-"></a>
</p>
<h2>Calling lastCreated(onSuccess, onError)</h2>
<p>should return an array containing the last 5 created objects.

</p>
<pre><code class="js">            dri.lastCreated(function(data) {
                should.exist(data)
                done();
            }, function(err) {
                should.not.exist(e);
                done();
            });</code></pre>
<p><a name="test-cases-for-node-dri-package-calling-lasteditedonsuccess-onerror-"></a>
</p>
<h2>Calling lastEdited(onSuccess, onError)</h2>
<p>should return an array containing the last 5 edited objects.

</p>
<pre><code class="js">            dri.lastEdited(function(data) {
                should.exist(data)
                done();
            }, function(err) {
                should.not.exist(e);
                done();
            });</code></pre>
<p><a name="test-cases-for-node-dri-package-calling-lastcreatedbytypetype-onsuccess-onerror-"></a>
</p>
<h2>Calling lastCreatedByType(type, onSuccess, onError)</h2>
<p>should return an array containing the last 5 created items.

</p>
<pre><code class="js">            dri.lastCreatedByType("item", function(data) {
                should.exist(data)
                assert.include(data[0], "item");
                done();
            }, function(err) {
                should.not.exist(e);
                done();
            });</code></pre>
<p><a name="test-cases-for-node-dri-package-calling-lasteditedbytypetype-onsuccess-onerror-"></a>
</p>
<h2>Calling lastEditedByType(type, onSuccess, onError)</h2>
<p>should return an array containing the last 5 edited items.

</p>
<pre><code class="js">            dri.lastEditedByType("item", function(data) {
                should.exist(data)
                assert.include(data[0], "item");
                done();
            }, function(err) {
                should.not.exist(e);
                done();
            });</code></pre>
<p><a name="test-cases-for-node-dri-package-calling-removeobjectid-onsuccess-onerror-with-a-item-id"></a>
</p>
<h2>Calling removeObject(id, onSuccess, onError) with a item id</h2>
<p>should remove the item from MongoDB.

</p>
<pre><code class="js">            dri.removeObject(itemId, function(result) {
                assert.include(result, itemId)
                done();
            }, function(err) {
                should.not.exist(e);
                done();
            });</code></pre>
<p><a name="test-cases-for-node-dri-package-calling-removeobjectid-onsuccess-onerror-with-a-series-id"></a>
</p>
<h2>Calling removeObject(id, onSuccess, onError) with a series id</h2>
<p>should remove the series from MongoDB.

</p>
<pre><code class="js">            dri.removeObject(seriesId, function(result) {
                assert.include(result, seriesId)
                done();
            }, function(err) {
                should.not.exist(e);
                done();
            });</code></pre>
<p><a name="test-cases-for-node-dri-package-calling-removeobjectid-onsuccess-onerror-with-a-collection-id"></a>
</p>
<h2>Calling removeObject(id, onSuccess, onError) with a collection id</h2>
<p>should remove the collection from MongoDB.

</p>
<pre><code class="js">            dri.removeObject(collId, function(result) {
                assert.include(result, collId)
                done();
            }, function(err) {
                should.not.exist(e);
                done();
            });</code></pre>
<p>make[2]: Leaving directory `/data/home/jtang/develop/dris-workflows-site/build/node-dri'
</p>
]]></description><link>http://undefined/api-for-node-dri</link><guid isPermaLink="true">http://undefined/api-for-node-dri</guid><dc:creator><![CDATA[jtang]]></dc:creator><pubDate>Tue, 10 Apr 2012 13:18:59 GMT</pubDate></item><item><title><![CDATA[<a href=".">DRIS Workflows</a>]]></title><description><![CDATA[<p>The DRIS Workflows package is a prototype system developed by some interns at TCHPC during the 2012 internship.

</p>
<h2>Primary authors of DRIS Workflows</h2>
<ul>
<li><a href="mailto:Matthias.Van.Wambeke@howest.be">Matthias.Van.Wambeke@howest.be</a></li>
<li><a href="mailto:Quirijn.Groot.Bluemink@howest.be">Quirijn.Groot.Bluemink@howest.be</a>

</li>
</ul>
<p>With input from the TCHPC and DRIS team at TCD.

</p>
<h2>Architecture</h2>
<p>The DRIS Workflows application consists of a number of components,
there are some planned features which have yet to be implemented.

</p>
<ul>
<li>dri-api (REST API server)<ul>
<li>node-dri (Back-office operations)<ul>
<li>node-fedora (Fedora-commons interface, planned on turning this
into a plugin)</li>
</ul>
</li>
</ul>
</li>
<li>dri-auth (oauth2 provider, planned)</li>
</ul>
<h3>Overview of current Architecture</h3>
<p><img src="/img/HighLevelArch-mvanwamb-qgrootbl-jtang-2012-04-13-dris-workflows.png" alt="">

</p>
<p>The architecture of the system is in an unstable state as we test the
design of the object model.

</p>
<h2>Licensing</h2>
<p>GPLv2.

</p>
<h2>Requirements</h2>
<p>The pre-requisites for installing the DRIS Workflows package.

</p>
<ul>
<li>Nodejs 0.6.x - <a href="http://www.nodejs.org">http://www.nodejs.org</a> - developed with</li>
<li>Mongodb 2.0.x - <a href="http://www.mongodb.org">http://www.mongodb.org</a> - developed with</li>
<li>fedora-commons 3.5 - <a href="http://fedora-commons.org/">http://fedora-commons.org/</a> - tested against REST api</li>
</ul>
<p>The systems that we have tested on

</p>
<ul>
<li>Tested on OSX 10.6.x, 10.7.x, SL6.x, Windows 7</li>
<li>Browsers tested with Chrome</li>
</ul>
<h2>Installation</h2>
<p>Currently the DRIS Workflows web-application depends on some internal
servers in TCHPC, this is required to pull the latest development versions
of dri-api, node-fedora, node-dri.

</p>
<p>If you are on a VPN to TCHPC or TCD it is possible to do the following to
install the API server and the Web application.

</p>
<h3>Deployment of API server (Required)</h3>
<pre><code><span class="identifier">git</span> <span class="identifier"><span class="keymethods">clone</span></span> <span class="identifier">ssh</span><span class="symbol">:</span>/<span class="regexp">/git@howest-server.tchpc.tcd.ie/howest</span><span class="regexp">/node/dri</span>-<span class="identifier">api</span>.<span class="identifier">git</span>
<span class="identifier">cd</span> <span class="identifier">dri</span>-<span class="identifier">api</span>
<span class="identifier">npm</span> <span class="identifier">install</span></code></pre>
<p>Once the <em>dri-api</em> server is installed with its dependancies, it must
be started by doing the following.

</p>
<pre><code>node app.js</code></pre>
<p>The fedora configuration needs to be refactored in the future, to
configure the target fedora repository the administrator needs to edit
<em>node_modules/fedora/lib/fedora.js</em>.

</p>
<h3>Deployment of DRIS Workflows (Required)</h3>
<pre><code><span class="identifier">git</span> <span class="identifier"><span class="keymethods">clone</span></span> <span class="identifier">ssh</span><span class="symbol">:</span>/<span class="regexp">/git@howest-server.tchpc.tcd.ie/howest</span><span class="regexp">/node/dris</span>-<span class="identifier">workflows</span>.<span class="identifier">git</span>
<span class="identifier">cd</span> <span class="identifier">dris</span>-<span class="identifier">workflows</span>
<span class="identifier">npm</span> <span class="identifier">install</span></code></pre>
<p>Once the <em>dris-workflow</em> application is installed with its dependancies, it must
be started by doing the following.

</p>
<pre><code>node app.js</code></pre>
<h2>Testing</h2>
<p>The intent is to release a set of API tests which can be used as a basis
for DRIS (DRI) compliance testing for those who wish to implement or
re-implement a compatible system.

</p>
<p>The tests are written with the <a href="http://visionmedia.github.com/mocha/">mocha</a> test framework.
The DRIS Workflows and dependent packages have tests which can be run as follows

</p>
<h3>Linux and OSX</h3>
<pre><code><span class="identifier">cd</span> <span class="constant">PACKAGE</span>
<span class="identifier">make</span> <span class="identifier"><span class="keymethods">test</span></span></code></pre>
<h3>Windows</h3>
<pre><code><span class="identifier">cd</span> <span class="constant">PACKAGE</span>
<span class="constant">NODE_PATH</span>=.<span class="regexp">/lib NODE_ENV=test ./node</span><span class="identifier">_modules</span>/.<span class="identifier">bin</span>/<span class="identifier">mocha</span> \
--<span class="identifier">reporter</span> <span class="identifier">spec</span> \
<span class="identifier"><span class="keymethods">test</span></span>/*.<span class="identifier">js</span></code></pre>
<h2>mrconfig</h2>
<p>If you are using <a href="http://joey.kitenet.net/code/mr/">mr</a>, the following
config file can be used to checkout all the relavent packages.

</p>
<pre><code>[dri-api]
checkout = git clone 'ssh:<span class="comment">//g</span>it@lonsdale.tchpc.tcd.ie/navr/node/dri-api' 'dri-api'

[dris-workflows]
checkout = git clone 'ssh:<span class="comment">//g</span>it@lonsdale.tchpc.tcd.ie/navr/node/dris-workflows' 'dris-workflows'

[dris-workflows-site]
checkout = git clone 'ssh:<span class="comment">//g</span>it@lonsdale.tchpc.tcd.ie/navr/node/dris-workflows-site' 'dris-workflows-site'

[node-dri]
checkout = git clone 'ssh:<span class="comment">//g</span>it@lonsdale.tchpc.tcd.ie/navr/node/node-dri' 'node-dri'

[node-fedora]
checkout = git clone 'ssh:<span class="comment">//g</span>it@lonsdale.tchpc.tcd.ie/navr/node/node-fedora' 'node-fedora'</code></pre>
<h2>Apache deployment</h2>
<p>Sample apache deployment, this assumes that dri-api and dris-workflows are CNAMES for dri-devel where the applications are being run.

</p>
<pre><code>&lt;Proxy *&gt;
Order deny,allow
Allow from all
&lt;/Proxy&gt;

<span class="comment"># api server</span>
&lt;VirtualHost <span class="number">134.226</span>.<span class="number">115.72</span>:<span class="number">80</span>&gt;
    ServerName              dri-api.tchpc.tcd.ie
    ProxyPass /             http:<span class="comment">//d</span>ri-api.tchpc.tcd.ie:<span class="number">4000</span>/
    ProxyPassReverse /      http:<span class="comment">//d</span>ri-api.tchpc.tcd.ie:<span class="number">4000</span>/
&lt;/VirtualHost&gt;

<span class="comment"># web application</span>
&lt;VirtualHost <span class="number">134.226</span>.<span class="number">115.72</span>:<span class="number">80</span>&gt;
    ServerName              dris-workflows.tchpc.tcd.ie
    ProxyPass /             http:<span class="comment">//d</span>ris-workflows.tchpc.tcd.ie:<span class="number">3000</span>/
    ProxyPassReverse /      http:<span class="comment">//d</span>ris-workflows.tchpc.tcd.ie:<span class="number">3000</span>/
&lt;/VirtualHost&gt;</code></pre>
]]></description><link>http://undefined.</link><guid isPermaLink="true">http://undefined.</guid><dc:creator><![CDATA[Jimmy Tang]]></dc:creator><pubDate>Thu, 29 Mar 2012 08:55:54 GMT</pubDate></item><item><title><![CDATA[DRIS Workflows -- Untitled]]></title><link>http://undefined/all-pages</link><guid isPermaLink="true">http://undefined/all-pages</guid><dc:creator><![CDATA[TCHPC]]></dc:creator><pubDate>Thu, 01 Jan 1970 00:00:00 GMT</pubDate></item></channel></rss>